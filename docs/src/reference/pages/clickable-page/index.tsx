/* eslint-disable */
import React from 'react'
import ReferencePage from '../../reference-page'


const ClickablePage = () => (
  <ReferencePage data={{"tags":{"see":"{@link https://northlight.dev/reference/clickable}","example":"(Example)\n### Click to send notification\n(?\n() => {\nconst [ count, setCount ] = useState(0)\nreturn (\n   <Clickable onClick={ () => setCount((prev) => prev + 1) }>\n  <Avatar name=\"anakin skywalker\" variant=\"rounded\" notificationCount={count}/>\n</Clickable>\n)\n}\n?)\n(Example)\n### Rendering a link if passing href\n(?\n<Clickable href=\"/reference/select\">\n<Center boxSize=\"3xs\" bgColor=\"gray.50\">\n  Link\n</Center>\n</Clickable>\n?)"},"filePath":"/Users/orestisrodriguez/Documents/Projects/@mediatool/northlight/framework/lib/components/clickable/clickable.tsx","description":"Wrapper component to make children interactive\nby taking care of focus/accessibility, will render\neither a link or button depending on if passing\nan href","displayName":"Clickable","methods":[],"props":{"href":{"defaultValue":null,"description":"","name":"href","parent":{"fileName":"northlight/framework/lib/components/clickable/types.ts","name":"ClickableProps"},"declarations":[{"fileName":"northlight/framework/lib/components/clickable/types.ts","name":"ClickableProps"}],"required":false,"type":{"name":"string"}},"linkProps":{"defaultValue":null,"description":"","name":"linkProps","parent":{"fileName":"northlight/framework/lib/components/clickable/types.ts","name":"ClickableProps"},"declarations":[{"fileName":"northlight/framework/lib/components/clickable/types.ts","name":"ClickableProps"}],"required":false,"type":{"name":"LinkProps"}},"isDisabled":{"defaultValue":{"value":"false"},"description":"If `true`, the element will be disabled.\nIt will set the `disabled` HTML attribute","name":"isDisabled","parent":{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"},"declarations":[{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"isFocusable":{"defaultValue":{"value":"false"},"description":"If `true` and isDisabled, the element will\nhave only `aria-disabled` set to `true`","name":"isFocusable","parent":{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"},"declarations":[{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"clickOnEnter":{"defaultValue":{"value":"true"},"description":"Whether or not trigger click on pressing `Enter`.","name":"clickOnEnter","parent":{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"},"declarations":[{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"clickOnSpace":{"defaultValue":{"value":"true"},"description":"Whether or not trigger click on pressing `Space`.","name":"clickOnSpace","parent":{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"},"declarations":[{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"ref":{"defaultValue":null,"description":"The ref for the element","name":"ref","parent":{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"},"declarations":[{"fileName":"northlight/node_modules/@chakra-ui/clickable/dist/use-clickable.d.ts","name":"UseClickableProps"}],"required":false,"type":{"name":"enum","raw":"Ref<HTMLElement>","value":[{"value":"(instance: HTMLElement) => void","description":"","fullComment":"","tags":{}},{"value":"RefObject<HTMLElement>","description":"","fullComment":"","tags":{}}]}}}}} />
);

export default ClickablePage
