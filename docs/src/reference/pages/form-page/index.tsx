/* eslint-disable */
import React from 'react'
import ReferencePage from '../../reference-page'


const FormPage = () => (
  <ReferencePage data={{"tags":{"see":"Field *\n{@link https://northlight.dev/reference/form}","example":"(Example)\n## Basic\n(?\n<Form initialValues={{name: ''}} onSubmit={console.log}>\n<TextField name=\"name\" label=\"What is your name\" />\n</Form>\n?)\n(Example)\n## With form methods\nThe form context provider passes down a lot of methods for handling state\n(?\n<Form initialValues={{name: ''}}>\n{({watch, reset }) => (\n<Stack>\n<TextField name=\"name\" label=\"What is your name?\"/>\n<Button variant=\"danger\" onClick={() => reset({})}>Reset</Button>\n<Code>{JSON.stringify(watch(), null, 2)}</Code>\n</Stack>\n)}\n\n</Form>\n?)\nYou can view more form methods on the **<a href=\"https://react-hook-form.com/api/useform/\" target=\"_blank\">react hook form docs</a>**\n(everything that the useForm hooks returns)\n(Example)\n## Moving the form state outside of Form\n(?\n+\n\n//This code could live in the backend\nconst submitValuesToBackend = (values) => {\nconsole.log({values})\nif(values.firstName !== 'Steve') {\nthrow Error('We only allow people named Steve \\;\\)')\n}\n}\nconst MyForm = () => (\n<Form\ninitialValues={ { firstName: '' } }\nonSubmit={ async (values, methods) => {\ntry {\nawait submitValuesToBackend(values)\n}\ncatch (err) {\nmethods.setError('firstName', { message: err.message })\n}\n} }\n>\n<HStack alignItems=\"end\" p=\"3\">\n<TextField\nname=\"firstName\"\nlabel=\"First Name\"\nisRequired={ true }\n/>\n<Button type=\"submit\" variant=\"success\">Validate</Button>\n</HStack>\n</Form>\n\n)\n\nrender(<MyForm />)\n\n?)\n(Example)\n## Using a ref\nYou can move up the form state using a ref as well\n(?\n() => {\nconst methods = useRef(null)\n\nreturn (\n<Stack>\n<Form\nref={methods}\ninitialValues={{name: ''}}\n>\n<TextField name=\"name\" label=\"What is your name?\" />\n</Form>\n<Button onClick={() => methods.current.reset({name: (Math.round(Math.random() * 100))})}>\nGet random number\n</Button>\n</Stack>\n\n)\n\n}\n?)"},"filePath":"/Users/orestisrodriguez/Documents/Projects/@mediatool/northlight/framework/lib/components/form/form.tsx","description":"The context provider for handling state of components wrapped in field","displayName":"Form","methods":[],"props":{"initialValues":{"defaultValue":null,"description":"This should contain an object with the name of the fields and their default values.","name":"initialValues","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":true,"type":{"name":"FieldValues"}},"enableReinitialize":{"defaultValue":{"value":"false"},"description":"This prop will reset the form if the initial values change","name":"enableReinitialize","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"onSubmit":{"defaultValue":null,"description":"","name":"onSubmit","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":true,"type":{"name":"CustomSubmitHandler<FieldValues>"}},"methods":{"defaultValue":{"value":"undefined"},"description":"You can define your own form methods outside of the form component using the useForm hook and passing down via methods prop:  https://react-hook-form.com/api/useform/","name":"methods","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":false,"type":{"name":"UseFormReturn<FieldValues>"}},"formSettings":{"defaultValue":{"value":"{ mode: 'onChange' }"},"description":"Every option that can be passed to useForm hook kan be passed here,\nfor example formSettings={{mode: 'onChange'}}\n(will trigger validation function on every change in form state","name":"formSettings","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":false,"type":{"name":"Partial<{ mode: keyof ValidationMode; reValidateMode: \"onBlur\" | \"onChange\" | \"onSubmit\"; defaultValues: { [x: string]: any; } | AsyncDefaultValues<FieldValues>; ... 8 more ...; delayError: number; }>"}},"validate":{"defaultValue":null,"description":"A functtion that takes in the current form values, and returns an object,\nwhere the keys are the name of the fields and the values are object\nwith a message key of what error occured.\nex: validate ={(formValues) => {\nlet errors = {}\nif(formValues.name === 'DROP TABLE;') {\nerrors.name = {message: 'Nice try'}\n}\nreturn errors\n}}","name":"validate","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":false,"type":{"name":"any"}},"shouldTrim":{"defaultValue":{"value":"true"},"description":"This will recursively trim all values strings inside the form values,\nno matter how nesteed they are","name":"shouldTrim","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"children":{"defaultValue":null,"description":"","name":"children","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FormProps"}],"required":true,"type":{"name":"enum","raw":"ReactNode | ((methods: UseFormReturn<FieldValues>) => ReactNode)","value":[{"value":"string"},{"value":"number"},{"value":"false"},{"value":"true"},{"value":"ReactElement<any, string | JSXElementConstructor<any>>","description":"","fullComment":"","tags":{}},{"value":"ReactFragment","description":"","fullComment":"","tags":{}},{"value":"ReactPortal","description":"","fullComment":"","tags":{}},{"value":"(methods: UseFormReturn<FieldValues>) => ReactNode","description":"","fullComment":"","tags":{}}]}}}}} />
);

export default FormPage
