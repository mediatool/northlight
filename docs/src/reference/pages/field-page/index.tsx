/* eslint-disable */
import React from 'react'
import ReferencePage from '../../reference-page'


const FieldPage = () => (
  <ReferencePage data={{"tags":{"see":"TextField *\nForm *\n{@link https://northlight.dev/reference/field}","example":"(Example)\n## Input example\n(?\n<Form initialValues={{name: ''}}>\n<Box p=\"2\">\n<Field name=\"name\" label=\"Input name\">\n{({value, onChange}) => (\n<Input value={value} onChange={onChange} />\n)}\n</Field>\n</Box>\n\n</Form>\n?)\n<br />\nAs you can see the field component acts as a middleman to connect\nany component to the form context, via a controlled value and onChange prop.\nMost of the common use cases for field,\nsuch as text input have been abstracted into their own components, for example _TextField_\n(Example)\n## Example with validation and form submition\n(?\n() => {\nconst toast = useToast()\nconst handleSubmit =(v) => {\ntoast({title: 'Sent Message', description: `\"${v.message}\"`})\n}\nreturn (\n<Form initialValues={{message: ''}} onSubmit={handleSubmit}>\n<Stack p=\"2\">\n<Field\nname=\"message\"\nlabel=\"Write email\"\nisRequired={true}\nvalidate={{maxLength: {message: 'Message must be under 30 characters', value: 30}}}\n>\n{({value, onChange}) => (\n<Textarea value={value} onChange={onChange} />\n)}\n</Field>\n<Button type=\"submit\" variant=\"brand\">Send Message</Button>\n</Stack>\n\n</Form>\n)\n}\n?)"},"filePath":"/Users/orestisrodriguez/Documents/Projects/@mediatool/northlight/framework/lib/components/form/field.tsx","description":"Wraps children under form context","displayName":"Field","methods":[],"props":{"name":{"defaultValue":null,"description":"","name":"name","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":true,"type":{"name":"string"}},"label":{"defaultValue":null,"description":"Label displayed as text beside or under/over\n(depending on direction prop) over children. Recommended for accesibility","name":"label","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":false,"type":{"name":"string"}},"direction":{"defaultValue":{"value":"column"},"description":"The input and label will be rendered inside a stack,\nthis determines whether to put the label above/below/left/right of the input","name":"direction","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":false,"type":{"name":"enum","raw":"StackDirection","value":[{"value":"\"row\""},{"value":"\"column\""},{"value":"\"column-reverse\""},{"value":"\"row-reverse\""},{"value":"ResponsiveArray<\"row\" | \"column\" | \"column-reverse\" | \"row-reverse\">","description":"","fullComment":"","tags":{}},{"value":"Partial<Record<string | (string & {}), \"row\" | \"column\" | \"column-reverse\" | \"row-reverse\">>","description":"","fullComment":"","tags":{}}]}},"isRequired":{"defaultValue":{"value":"false"},"description":"","name":"isRequired","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"noLabelConnection":{"defaultValue":{"value":"false"},"description":"In rare cases the htmlFor attribute can mess up the markup,\nif this prop is true then htmlFor on the label will be undefined","name":"noLabelConnection","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":false,"type":{"name":"enum","raw":"boolean","value":[{"value":"false"},{"value":"true"}]}},"validate":{"defaultValue":null,"description":"Inline validation, in most cases validation should be handled in the form component itself,\nbut you can pass down simple validation like\nvalidate={{maxLength: {message: 'Max 40 characters', value: 40}}}\nfor more information view https://react-hook-form.com/api/useform/register/ docs. (Whatever you put into the validate object will be put as the second options arguments on the react hook form register method)","name":"validate","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":false,"type":{"name":"enum","raw":"RegisterOptions<FieldValues, string>","value":[{"value":"Partial<{ required: string | ValidationRule<boolean>; min: ValidationRule<string | number>; max: ValidationRule<string | number>; ... 9 more ...; deps: string | string[]; }> & { ...; }"},{"value":"Partial<{ required: string | ValidationRule<boolean>; min: ValidationRule<string | number>; max: ValidationRule<string | number>; ... 9 more ...; deps: string | string[]; }> & { ...; }"},{"value":"Partial<{ required: string | ValidationRule<boolean>; min: ValidationRule<string | number>; max: ValidationRule<string | number>; ... 9 more ...; deps: string | string[]; }> & { ...; }"}]}},"children":{"defaultValue":null,"description":"","name":"children","parent":{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"},"declarations":[{"fileName":"northlight/framework/lib/components/form/types.ts","name":"FieldProps"}],"required":true,"type":{"name":"(field: ControllerRenderProps<FieldValues, string>, methods: UseFormReturn<FieldValues>) => Element"}}}}} />
);

export default FieldPage
